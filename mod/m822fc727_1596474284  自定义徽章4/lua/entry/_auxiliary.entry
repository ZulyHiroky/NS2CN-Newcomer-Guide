-- Has to load first!

local format = string.format

local cdata_types = {
	Vector = function(v, literal)
		return format(literal and "Vector(%f, %f, %f)" or "%f, %f, %f", v.x, v.y, v.z)
	end,
	Color = function(c, literal)
		return format(literal and "Color(%f, %f, %f, %f)" or "%f, %f, %f, %f", c.r, c.g, c.b, c.a)
	end,
	Angles = function(a, literal)
		return format(literal and "Angles{yaw = %f, pitch = %f, roll = %f}" or "yaw: %f, pitch: %f, roll: %f", a.yaw, a.pitch, a.roll)
	end,
	Coords = function(c, literal)
		return CoordsToString(c, not literal and "" or nil)
	end
}
local types = {
	string = function(s, literal)
		if literal then
			return "\"" .. s .. "\""
		else
			return s
		end
	end,
	table = function(t, literal, indent, printed)
		if not printed or printed[t] then
			return tostring(t)
		end

		printed[t] = true

		local s = "{"
		local indent = indent or 1
		for i = 1, #t do
			s = s .. "\n" .. string.rep("\t", indent) .. ToString(t[i], true, indent + 1, printed) .. ","
		end

		for k, v in pairs(t) do
			if type(k) ~= "number" or k > #t then
				s = s .. "\n" .. string.rep("\t", indent) .. (
					type(k) == "string" and
						k
					or
						"[" .. ToString(k, true, indent + 1, printed) .. "]"
					) .. " = " .. ToString(v, true, indent + 1, printed) .. ", "
			end
		end

		if not literal then
			return s .. "\n" .. string.rep("\t", indent-1) .. "}"
		else
			return AddressOf(t) .. ":" .. s .. "\n" .. string.rep("\t", indent-1) .. "}"
		end
	end,
	["function"] = function(f, literal, indent, printed)
		if not printed or printed[f] then
			return tostring(f)
		end

		printed[f] = true
		return tostring(f) .. " " .. ToString(debug.getinfo(f), literal, indent, printed)
	end,
	cdata = function(v, literal)
		if v.isa then
			local s
			if v:isa "Vector" then
				s = cdata_types.Vector(v, literal)
			elseif v:isa "Color" then
				s = cdata_types.Color(v, literal)
			elseif v:isa "Angles" then
				s = cdata_types.Angles(v, literal)
			elseif v:isa "Coords" then
				s = cdata_types.Coords(v, literal)
			end
			return s
		else
			return tostring(v)
		end
	end,
	userdata = function(u, literal)
		local meta = getmetatable(u)
		if type(meta) ~= "table" then
			return tostring(u)
		elseif meta.__towatch then
			return ToString(meta.__towatch(u), literal)
		else
			return tostring(meta) .. "|" .. tostring(u)
		end
	end
}
table.tostring = types.table

function CoordsToString(coords, name)
	name = name or "Coords "
	return format("%s{ origin = (%0.2f, %0.2f, %0.2f), xAxis = (%0.2f, %0.2f, %0.2f), yAxis = (%0.2f, %0.2f, %0.2f), zAxis = (%0.2f, %0.2f, %0.2f) }",
							name, coords.origin.x, coords.origin.y, coords.origin.z,
							coords.xAxis.x, coords.xAxis.y, coords.xAxis.z,
							coords.yAxis.x, coords.yAxis.y, coords.yAxis.z,
							coords.zAxis.x, coords.zAxis.y, coords.zAxis.z)
end

function AddressOf(v)
	local s = tostring(v)
	return s:sub(#s-9)
end

function ToString(v, literal, indentation, printed)
	if v == nil then
		return "nil"
	end

	if printed == nil then
		printed = {}
	end
	local meta = getmetatable(v)
	local entry = types[type(v)]

	if (not meta or not meta.__tostring) and entry then
		return entry(v, literal, indentation, printed)
	else
		return tostring(v)
	end
end

function Log(formatString, ...)
    local args = {}
    for i = 1, select('#', ...) do
        local v = select(i, ...)
        table.insert(args, ToString(v, true))
    end
    if #args > 0 then
        HPrint(formatString, unpack(args))
    else
        HPrint(formatString)
    end
end

debug.compacttraceback = function(message, level)
	local printed = {}
	level   = level and level + 1 or 2
	local str = "Call stack:"
	local i = level
	local func = debug.getinfo(i)
	while func do
		if func.linedefined == 0 then
			str = str .. ("\n\t#%d: %s:%d"):format(i-level+1, func.source:sub(2), func.currentline)
		else
			str = str .. ("\n\t#%d: %s:%i%s:%i"):format(i-level+1, func.name, func.currentline, func.source, func.linedefined)
		end
		i = i + 1
		func = debug.getinfo(i)
	end
	if message then
		return message .. "\n" .. str
	else
		return str
	end
end
debug.fulltraceback = function(message, level)
	local printed = {}
	level   = level and level + 1 or 2
	local str = "Call stack:"
	local i = level
	local func = debug.getinfo(i)
	while func do
		if func.linedefined == 0 then
			str = str .. ("\n\t#%d: %s:%d"):format(i-level+1, func.source:sub(2), func.currentline)
		else
			str = str .. ("\n\t#%d: %s:%i%s:%i"):format(i-level+1, func.name, func.currentline, func.source, func.linedefined)
		end
		local j = 1
		local name, value = debug.getlocal(i, j)
		while name do
			str = str .. ("\n\t\t%s = %s"):format(name, ToString(value, true, 3, printed))
			j = j + 1
			name, value = debug.getlocal(i, j)
		end
		i = i + 1
		func = debug.getinfo(i)
	end
	if message then
		return message .. "\n" .. str
	else
		return str
	end
end
debug.traceback = function(message, level)
	level   = level and level + 1 or 2
	local str = "Call stack:"
	local i = level
	local func = debug.getinfo(i)
	while func do
		if func.linedefined == 0 then
			str = str .. ("\n\t#%d: %s:%d"):format(i-level+1, func.source:sub(2), func.currentline)
		else
			str = str .. ("\n\t#%d: %s:%i%s:%i"):format(i-level+1, func.name or "[anonymous]", func.currentline, func.source, func.linedefined)
		end
		local j = 1
		local name, value = debug.getlocal(i, j)
		while name do
			str = str .. ("\n\t\t%s = %s"):format(name, ToString(value, true, 3, false))
			j = j + 1
			name, value = debug.getlocal(i, j)
		end
		i = i + 1
		func = debug.getinfo(i)
	end
	if message then
		return message .. "\n" .. str
	else
		return str
	end
end

if Script then
	Script.CallStack = debug.traceback
end

do
	local old = debug.getupvalue
	local function getupvalue(f, up, recursive)
		if type(up) ~= "string" then
			return old(f, up)
		end

		if recursive == nil then
			recursive = true
		end

		local funcs   = {}
		local i, n, v = 0
		repeat
			i = i + 1
			n, v = old(f, i)
			if recursive and type(v) == "function" then
				table.insert(funcs, v)
			end
		until
			n == nil or n == up

		-- Do a recursive search
		if n == nil then
			for _, subf in ipairs(funcs) do
				v, f, i = getupvalue(subf, up)
				if f ~= nil then
					return v, f, i
				end
			end
		elseif n == up then
			return v, f, i
		end
	end
	debug.getupvalue = getupvalue
end

do
	local old = debug.setupvalue
	local function setupvalue(f, up, v, recursive)
		if type(up) ~= "string" then
			return old(f, up, v)
		end

		local _, f, i = debug.getupvalue(f, up, recursive)
		old(f, i, v)
	end
	debug.setupvalue = setupvalue
end

do
	-- Iterate through upvalues of dest, and if is nil, get the equivalent upvalue from src instead.
	-- Furthermore, it keeps the linkage, so functions that use the same locals as src will also
	-- see the changes.
	-- Extras is extra upvalues to be set
	local function joinupvalues(dest, src, extras)
		assert(type(dest) == "function", "first argument is not a function!")
		assert(type(src)  == "function", "second argument is not a function!")
		local i, n, v = 0
		while true do
			i = i + 1
			n, v = debug.getupvalue(dest, i)
			if n == nil then
				break
			end

			local _, _, src_i = debug.getupvalue(src, n, false)
			if src_i ~= nil then
				debug.upvaluejoin(dest, i, src, src_i)
				if v ~= nil then
					local _, original = debug.getupvalue(dest, i)
					if type(original) == "function" and type(v) == "function" then
						joinupvalues(v, original)
					end
					debug.setupvalue(dest, i, v)
				end
			end
		end

		if extras then
			for k, v in pairs(extras) do
				debug.setupvalue(src, k, v)
			end
		end
	end
	debug.joinupvalues = joinupvalues
end

do
	local function replaceupvalue(f, up, v, recursive)
		local original, owner_func, i = debug.getupvalue(f, up, recursive)
		assert(owner_func, "Could not find the specified upvalue!")
		debug.joinupvalues(v, original)
		debug.setupvalue(owner_func, i, v)
	end
	debug.replaceupvalue = replaceupvalue
end

-- Example of debug.joinupvalues
-- NB: If you don't use an "upvalue", it won't be an upvalue.
if false then
	local a, b
	do
		local n     = 0;   -- Refers to new n
		local delta = 1;
		local function x() -- Refers to new x
			print "x 1"
			n = n - delta
			return n
		end
		a = function()
			print "a"
			return x(), delta
		end
	end
	do
		local delta  -- Refers to original delta
		local n = 55 -- Overrides original n
		local function x() -- Overrides original x
			print "x 2"
			n = n + delta
			delta = delta + 1
			return n
		end
		b = function()
			print "b"
			return x() * 2 + n
		end
	end
	debug.joinupvalues(b, a)
end

do
	local function replacemethod(classname, n, v, original)
		local derived = Script.GetDerivedClasses(classname)
		for _, d in ipairs(derived) do
			local class = _G[d]
			if class[n] == original then
				class[n] = v
				replacemethod(d, n, v, original)
			end
		end
	end

	function debug.replacemethod(classname, n, v)
		assert(type(v) == "function", "third argument is not a function!")
		local class = _G[classname]
		local original = class[n]
		debug.joinupvalues(v, original)
		class[n] = v
		replacemethod(classname, n, v, original)
	end
end

modEntry = {}
