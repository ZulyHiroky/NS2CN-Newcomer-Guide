<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="specularMap" type="texture" address="wrap" />
		<input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
		<input name="blendMap" type="texture" address="wrap">materials/effects/mesh_effects/skulk_view_blood.dds</input>
		<input name="overlayMap" type="texture" address="wrap">materials/effects/mesh_effects/nanoshield_circuit.dds</input>
		<input name="hiddenAmount" type="float">0.0</input>
		<input name="highlight" type="float">0.0</input>
		<input name="outline" type="float">0.0</input>
		<input name="colorIntensity" type="float">1.0</input>
	</inputs>
	
	<params>
		<param name="alphaTest">true</param>
	</params>
	
	<code>
	<![CDATA[
		float paramQuick(float x, float p) {
			return pow(x,p);
		}
		
		float paramSlow(float x, float p) {
			return 1 - pow(abs(x),p);
		}
		
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
            return n.xyz;
		}
		
		void MaterialShader(in Material_Input input, inout Material material)
		{
			float f             = 1 - hiddenAmount;
			
			float param         = tex2D(blendMap, input.texCoord * 2.5).a; // speading parameter
			float textureSpeed  = 2;
			float destroySpeed  = 1;
		
			float4 specularGloss = tex2D(specularMap, input.texCoord);
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, input.texCoord) );	
			material.specular	= specularGloss.rgb;
			material.gloss		= specularGloss.a;
			
			float opacity       = paramSlow(param,destroySpeed);
			float blend         = paramQuick(param,textureSpeed);
			
			float3 albedo;
			float3 emissive;
			
			if (colorIntensity < 1){
				albedo    = max(0.5, pow(colorIntensity, 1.6)) * tex2D(albedoMap, input.texCoord).rgb;
				emissive  = tex2D(emissiveMap, input.texCoord).rgb * colorIntensity;
			}
			else{
				albedo    = tex2D(albedoMap, input.texCoord).rgb;				
				emissive  = tex2D(emissiveMap, input.texCoord).rgb;
			}
			
			// Blending
			if (blend + f > 1)
			{
				if (colorIntensity < 1){
					material.albedo    = albedo;				
					material.emissive  = emissive;
				}
				else{
					material.albedo    = albedo;				
					material.emissive  = emissive;
				}
			}
			else
			{
				material.albedo    = albedo;
				material.emissive = (1 - (blend + f)) * tex2D(overlayMap, input.texCoord * float2(10, 9)).rgb * float3(2, 3, 6) * 50;
			}
			
			//Â Opacity
			material.opacity = opacity + f - 0.5;
			if (material.opacity < 0.5) {
				material.emissive   = 0;
			}
			
			material.id = highlight;
			material.outline = outline;
			
		}
	]]>
	</code>

</shader>