<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="specularMap" type="texture" address="wrap" />
		<input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
		<input name="highlight" type="float">0.0</input>
		<input name="eightgreenHands" type="float">0.0</input>
	</inputs>
	
	<code>
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
   		float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
			return n.xyz;
		}
		void MaterialShader(in Material_Input input, inout Material material)
		{
			float highlightId   = highlight;
			
			float4 specularGloss = tex2D(specularMap, input.texCoord);
			
			material.albedo 	= tex2D(albedoMap, input.texCoord).rgb;
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, input.texCoord) );
			material.specular	= specularGloss.rgb;
			material.gloss		= specularGloss.a;
			material.emissive   = tex2D(emissiveMap, input.texCoord).rgb;
			
      float _;

            if (eightgreenHands >= 0.5){ 
                if (input.texCoord.x < 0.4) {
                    if ((input.texCoord.x < 0.18) || 
                        (input.texCoord.y < 0.57)){
                        _ = material.albedo.r;
                        material.albedo.r = material.albedo.g;
                        material.albedo.g = _;
                    }
                }
                _ = material.emissive.r;
                material.emissive.r = material.emissive.g;
                material.emissive.g = _;
                material.gloss		= pow(material.gloss, 0.1);
            }
            
			material.id = 1*highlightId;    // for alien vision
			
		}
	]]>		
	</code>

</shader>